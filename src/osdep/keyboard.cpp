#include <string.h>

#include "sysdeps.h"
#include "options.h"
#include "inputdevice.h"
#include "keyboard.h"
#include "config.h"

char keyboard_type = 0;
static struct uae_input_device_kbr_default keytrans_amiga[] = {
	
	{ SDL_SCANCODE_ESCAPE, INPUTEVENT_KEY_ESC },

	{ SDL_SCANCODE_F1, INPUTEVENT_KEY_F1, 0, INPUTEVENT_SPC_FLOPPY0, ID_FLAG_QUALIFIER_SPECIAL, INPUTEVENT_SPC_EFLOPPY0, ID_FLAG_QUALIFIER_SPECIAL | ID_FLAG_QUALIFIER_SHIFT },
	{ SDL_SCANCODE_F2, INPUTEVENT_KEY_F2, 0, INPUTEVENT_SPC_FLOPPY1, ID_FLAG_QUALIFIER_SPECIAL, INPUTEVENT_SPC_EFLOPPY1, ID_FLAG_QUALIFIER_SPECIAL | ID_FLAG_QUALIFIER_SHIFT },
	{ SDL_SCANCODE_F3, INPUTEVENT_KEY_F3, 0, INPUTEVENT_SPC_FLOPPY2, ID_FLAG_QUALIFIER_SPECIAL, INPUTEVENT_SPC_EFLOPPY2, ID_FLAG_QUALIFIER_SPECIAL | ID_FLAG_QUALIFIER_SHIFT },
	{ SDL_SCANCODE_F4, INPUTEVENT_KEY_F4, 0, INPUTEVENT_SPC_FLOPPY3, ID_FLAG_QUALIFIER_SPECIAL, INPUTEVENT_SPC_EFLOPPY3, ID_FLAG_QUALIFIER_SPECIAL | ID_FLAG_QUALIFIER_SHIFT },
	
	{ SDL_SCANCODE_F5, INPUTEVENT_KEY_F5, 0, INPUTEVENT_SPC_CD0, ID_FLAG_QUALIFIER_SPECIAL, INPUTEVENT_SPC_ECD0, ID_FLAG_QUALIFIER_SPECIAL | ID_FLAG_QUALIFIER_SHIFT },
	{ SDL_SCANCODE_F6, INPUTEVENT_KEY_F6, 0, INPUTEVENT_SPC_STATERESTOREDIALOG, ID_FLAG_QUALIFIER_SPECIAL, INPUTEVENT_SPC_STATESAVEDIALOG, ID_FLAG_QUALIFIER_SPECIAL | ID_FLAG_QUALIFIER_SHIFT },
	{ SDL_SCANCODE_F7, INPUTEVENT_KEY_F7 },
	{ SDL_SCANCODE_F8, INPUTEVENT_KEY_F8 },
	{ SDL_SCANCODE_F9, INPUTEVENT_KEY_F9 },
	{ SDL_SCANCODE_F10, INPUTEVENT_KEY_F10 },

	{ SDL_SCANCODE_1, INPUTEVENT_KEY_1 },
	{ SDL_SCANCODE_2, INPUTEVENT_KEY_2 },
	{ SDL_SCANCODE_3, INPUTEVENT_KEY_3 },
	{ SDL_SCANCODE_4, INPUTEVENT_KEY_4 },
	{ SDL_SCANCODE_5, INPUTEVENT_KEY_5 },
	{ SDL_SCANCODE_6, INPUTEVENT_KEY_6 },
	{ SDL_SCANCODE_7, INPUTEVENT_KEY_7 },
	{ SDL_SCANCODE_8, INPUTEVENT_KEY_8 },
	{ SDL_SCANCODE_9, INPUTEVENT_KEY_9 },
	{ SDL_SCANCODE_0, INPUTEVENT_KEY_0 },

	{ SDL_SCANCODE_TAB, INPUTEVENT_KEY_TAB },

	{ SDL_SCANCODE_A, INPUTEVENT_KEY_A },
	{ SDL_SCANCODE_B, INPUTEVENT_KEY_B },
	{ SDL_SCANCODE_C, INPUTEVENT_KEY_C },
	{ SDL_SCANCODE_D, INPUTEVENT_KEY_D },
	{ SDL_SCANCODE_E, INPUTEVENT_KEY_E },
	{ SDL_SCANCODE_F, INPUTEVENT_KEY_F },
	{ SDL_SCANCODE_G, INPUTEVENT_KEY_G },
	{ SDL_SCANCODE_H, INPUTEVENT_KEY_H },
	{ SDL_SCANCODE_I, INPUTEVENT_KEY_I },
	{ SDL_SCANCODE_J, INPUTEVENT_KEY_J, 0, INPUTEVENT_SPC_SWAPJOYPORTS, ID_FLAG_QUALIFIER_SPECIAL },
	{ SDL_SCANCODE_K, INPUTEVENT_KEY_K },
	{ SDL_SCANCODE_L, INPUTEVENT_KEY_L },
	{ SDL_SCANCODE_M, INPUTEVENT_KEY_M },
	{ SDL_SCANCODE_N, INPUTEVENT_KEY_N },
	{ SDL_SCANCODE_O, INPUTEVENT_KEY_O },
	{ SDL_SCANCODE_P, INPUTEVENT_KEY_P },
	{ SDL_SCANCODE_Q, INPUTEVENT_KEY_Q },
	{ SDL_SCANCODE_R, INPUTEVENT_KEY_R },
	{ SDL_SCANCODE_S, INPUTEVENT_KEY_S },
	{ SDL_SCANCODE_T, INPUTEVENT_KEY_T },
	{ SDL_SCANCODE_U, INPUTEVENT_KEY_U },
	{ SDL_SCANCODE_V, INPUTEVENT_KEY_V },
	{ SDL_SCANCODE_W, INPUTEVENT_KEY_W },
	{ SDL_SCANCODE_X, INPUTEVENT_KEY_X },
	{ SDL_SCANCODE_Y, INPUTEVENT_KEY_Y },
	{ SDL_SCANCODE_Z, INPUTEVENT_KEY_Z },

	{ SDL_SCANCODE_CAPSLOCK, INPUTEVENT_KEY_CAPS_LOCK, ID_FLAG_TOGGLE },

	{ SDL_SCANCODE_KP_1, INPUTEVENT_KEY_NP_1 },
	{ SDL_SCANCODE_KP_2, INPUTEVENT_KEY_NP_2 },
	{ SDL_SCANCODE_KP_3, INPUTEVENT_KEY_NP_3 },
	{ SDL_SCANCODE_KP_4, INPUTEVENT_KEY_NP_4 },
	{ SDL_SCANCODE_KP_5, INPUTEVENT_KEY_NP_5 },
	{ SDL_SCANCODE_KP_6, INPUTEVENT_KEY_NP_6 },
	{ SDL_SCANCODE_KP_7, INPUTEVENT_KEY_NP_7 },
	{ SDL_SCANCODE_KP_8, INPUTEVENT_KEY_NP_8 },
	{ SDL_SCANCODE_KP_9, INPUTEVENT_KEY_NP_9 },
	{ SDL_SCANCODE_KP_0, INPUTEVENT_KEY_NP_0 },
	{ SDL_SCANCODE_KP_PERIOD, INPUTEVENT_KEY_NP_PERIOD },
	{ SDL_SCANCODE_KP_PLUS, INPUTEVENT_KEY_NP_ADD, 0, INPUTEVENT_SPC_VOLUME_UP, ID_FLAG_QUALIFIER_SPECIAL, INPUTEVENT_SPC_MASTER_VOLUME_UP, ID_FLAG_QUALIFIER_SPECIAL | ID_FLAG_QUALIFIER_CONTROL, INPUTEVENT_SPC_INCREASE_REFRESHRATE, ID_FLAG_QUALIFIER_SPECIAL | ID_FLAG_QUALIFIER_SHIFT },
	{ SDL_SCANCODE_KP_MINUS, INPUTEVENT_KEY_NP_SUB, 0, INPUTEVENT_SPC_VOLUME_DOWN, ID_FLAG_QUALIFIER_SPECIAL, INPUTEVENT_SPC_MASTER_VOLUME_DOWN, ID_FLAG_QUALIFIER_SPECIAL | ID_FLAG_QUALIFIER_CONTROL, INPUTEVENT_SPC_DECREASE_REFRESHRATE, ID_FLAG_QUALIFIER_SPECIAL | ID_FLAG_QUALIFIER_SHIFT },
	{ SDL_SCANCODE_KP_MULTIPLY, INPUTEVENT_KEY_NP_MUL, 0, INPUTEVENT_SPC_VOLUME_MUTE, ID_FLAG_QUALIFIER_SPECIAL, INPUTEVENT_SPC_MASTER_VOLUME_MUTE, ID_FLAG_QUALIFIER_SPECIAL | ID_FLAG_QUALIFIER_CONTROL },
	{ SDL_SCANCODE_KP_DIVIDE, INPUTEVENT_KEY_NP_DIV },
	{ SDL_SCANCODE_KP_ENTER, INPUTEVENT_KEY_ENTER },

	{ SDL_SCANCODE_MINUS, INPUTEVENT_KEY_SUB },
	{ SDL_SCANCODE_EQUALS, INPUTEVENT_KEY_EQUALS },
	{ SDL_SCANCODE_BACKSPACE, INPUTEVENT_KEY_BACKSPACE },
	{ SDL_SCANCODE_RETURN, INPUTEVENT_KEY_RETURN },
	{ SDL_SCANCODE_SPACE, INPUTEVENT_KEY_SPACE },

	{ SDL_SCANCODE_LSHIFT, INPUTEVENT_KEY_SHIFT_LEFT, 0, INPUTEVENT_SPC_QUALIFIER_SHIFT },
	{ SDL_SCANCODE_LCTRL, INPUTEVENT_KEY_CTRL, 0, INPUTEVENT_SPC_QUALIFIER_CONTROL },
	{ SDL_SCANCODE_LGUI, INPUTEVENT_KEY_AMIGA_LEFT, 0, INPUTEVENT_SPC_QUALIFIER_WIN },
	{ SDL_SCANCODE_LALT, INPUTEVENT_KEY_ALT_LEFT, 0, INPUTEVENT_SPC_QUALIFIER_ALT },
	{ SDL_SCANCODE_RALT, INPUTEVENT_KEY_ALT_RIGHT, 0, INPUTEVENT_SPC_QUALIFIER_ALT },
	{ SDL_SCANCODE_RGUI, INPUTEVENT_KEY_AMIGA_RIGHT, 0, INPUTEVENT_SPC_QUALIFIER_WIN },
	{ SDL_SCANCODE_MENU, INPUTEVENT_KEY_AMIGA_RIGHT, 0, INPUTEVENT_SPC_QUALIFIER_WIN },
	{ SDL_SCANCODE_APPLICATION, INPUTEVENT_KEY_AMIGA_RIGHT, 0, INPUTEVENT_SPC_QUALIFIER_WIN },
	{ SDL_SCANCODE_RCTRL, INPUTEVENT_KEY_CTRL, 0, INPUTEVENT_SPC_QUALIFIER_CONTROL },
	{ SDL_SCANCODE_RSHIFT, INPUTEVENT_KEY_SHIFT_RIGHT, 0, INPUTEVENT_SPC_QUALIFIER_SHIFT },

	{ SDL_SCANCODE_UP, INPUTEVENT_KEY_CURSOR_UP },
	{ SDL_SCANCODE_DOWN, INPUTEVENT_KEY_CURSOR_DOWN },
	{ SDL_SCANCODE_LEFT, INPUTEVENT_KEY_CURSOR_LEFT },
	{ SDL_SCANCODE_RIGHT, INPUTEVENT_KEY_CURSOR_RIGHT },

	{ SDL_SCANCODE_INSERT, INPUTEVENT_KEY_AMIGA_LEFT, 0, INPUTEVENT_SPC_PASTE, ID_FLAG_QUALIFIER_SPECIAL },
	{ SDL_SCANCODE_DELETE, INPUTEVENT_KEY_DEL },
	{ SDL_SCANCODE_HOME, INPUTEVENT_KEY_AMIGA_RIGHT },
	{ SDL_SCANCODE_PAGEDOWN, INPUTEVENT_KEY_HELP },
	{ SDL_SCANCODE_PAGEUP, INPUTEVENT_SPC_FREEZEBUTTON },
	
	{ SDL_SCANCODE_LEFTBRACKET, INPUTEVENT_KEY_LEFTBRACKET },
	{ SDL_SCANCODE_RIGHTBRACKET, INPUTEVENT_KEY_RIGHTBRACKET },
	{ SDL_SCANCODE_SEMICOLON, INPUTEVENT_KEY_SEMICOLON },
	{ SDL_SCANCODE_APOSTROPHE, INPUTEVENT_KEY_SINGLEQUOTE },
	{ SDL_SCANCODE_GRAVE, INPUTEVENT_KEY_BACKQUOTE },

	{ SDL_SCANCODE_BACKSLASH, INPUTEVENT_KEY_BACKSLASH },
	{ SDL_SCANCODE_COMMA, INPUTEVENT_KEY_COMMA },
	{ SDL_SCANCODE_PERIOD, INPUTEVENT_KEY_PERIOD },
	{ SDL_SCANCODE_SLASH, INPUTEVENT_KEY_DIV },
	{ SDL_SCANCODE_NONUSBACKSLASH, INPUTEVENT_KEY_30 },
	{ SDL_SCANCODE_SYSREQ, INPUTEVENT_SPC_SCREENSHOT_CLIPBOARD, 0, INPUTEVENT_SPC_SCREENSHOT, ID_FLAG_QUALIFIER_SPECIAL },

	{ SDL_SCANCODE_END, INPUTEVENT_SPC_QUALIFIER_SPECIAL },
	{ SDL_SCANCODE_PAUSE, INPUTEVENT_SPC_PAUSE, 0, INPUTEVENT_SPC_SINGLESTEP, ID_FLAG_QUALIFIER_SPECIAL | ID_FLAG_QUALIFIER_CONTROL, INPUTEVENT_SPC_IRQ7, ID_FLAG_QUALIFIER_SPECIAL | ID_FLAG_QUALIFIER_SHIFT, INPUTEVENT_SPC_WARP, ID_FLAG_QUALIFIER_SPECIAL },

	//{ SDL_SCANCODE_F12, INPUTEVENT_SPC_ENTERGUI },

	{ SDL_SCANCODE_AUDIOSTOP, INPUTEVENT_KEY_CDTV_STOP },
	{ SDL_SCANCODE_AUDIOPLAY, INPUTEVENT_KEY_CDTV_PLAYPAUSE },
	{ SDL_SCANCODE_AUDIOPREV, INPUTEVENT_KEY_CDTV_PREV },
	{ SDL_SCANCODE_AUDIONEXT, INPUTEVENT_KEY_CDTV_NEXT },

	{ -1, 0 }
};

static struct uae_input_device_kbr_default keytrans_pc1[] = {

	{ SDL_SCANCODE_ESCAPE, INPUTEVENT_KEY_ESC },

	{ SDL_SCANCODE_F1, INPUTEVENT_KEY_F1 },
	{ SDL_SCANCODE_F2, INPUTEVENT_KEY_F2 },
	{ SDL_SCANCODE_F3, INPUTEVENT_KEY_F3 },
	{ SDL_SCANCODE_F4, INPUTEVENT_KEY_F4 },
	{ SDL_SCANCODE_F5, INPUTEVENT_KEY_F5 },
	{ SDL_SCANCODE_F6, INPUTEVENT_KEY_F6 },
	{ SDL_SCANCODE_F7, INPUTEVENT_KEY_F7 },
	{ SDL_SCANCODE_F8, INPUTEVENT_KEY_F8 },
	{ SDL_SCANCODE_F9, INPUTEVENT_KEY_F9 },
	{ SDL_SCANCODE_F10, INPUTEVENT_KEY_F10 },
	{ SDL_SCANCODE_F11, INPUTEVENT_KEY_F11 },
	{ SDL_SCANCODE_F12, INPUTEVENT_KEY_F12 },

	{ SDL_SCANCODE_1, INPUTEVENT_KEY_1 },
	{ SDL_SCANCODE_2, INPUTEVENT_KEY_2 },
	{ SDL_SCANCODE_3, INPUTEVENT_KEY_3 },
	{ SDL_SCANCODE_4, INPUTEVENT_KEY_4 },
	{ SDL_SCANCODE_5, INPUTEVENT_KEY_5 },
	{ SDL_SCANCODE_6, INPUTEVENT_KEY_6 },
	{ SDL_SCANCODE_7, INPUTEVENT_KEY_7 },
	{ SDL_SCANCODE_8, INPUTEVENT_KEY_8 },
	{ SDL_SCANCODE_9, INPUTEVENT_KEY_9 },
	{ SDL_SCANCODE_0, INPUTEVENT_KEY_0 },

	{ SDL_SCANCODE_TAB, INPUTEVENT_KEY_TAB },

	{ SDL_SCANCODE_A, INPUTEVENT_KEY_A },
	{ SDL_SCANCODE_B, INPUTEVENT_KEY_B },
	{ SDL_SCANCODE_C, INPUTEVENT_KEY_C },
	{ SDL_SCANCODE_D, INPUTEVENT_KEY_D },
	{ SDL_SCANCODE_E, INPUTEVENT_KEY_E },
	{ SDL_SCANCODE_F, INPUTEVENT_KEY_F },
	{ SDL_SCANCODE_G, INPUTEVENT_KEY_G },
	{ SDL_SCANCODE_H, INPUTEVENT_KEY_H },
	{ SDL_SCANCODE_I, INPUTEVENT_KEY_I },
	{ SDL_SCANCODE_J, INPUTEVENT_KEY_J },
	{ SDL_SCANCODE_K, INPUTEVENT_KEY_K },
	{ SDL_SCANCODE_L, INPUTEVENT_KEY_L },
	{ SDL_SCANCODE_M, INPUTEVENT_KEY_M },
	{ SDL_SCANCODE_N, INPUTEVENT_KEY_N },
	{ SDL_SCANCODE_O, INPUTEVENT_KEY_O },
	{ SDL_SCANCODE_P, INPUTEVENT_KEY_P },
	{ SDL_SCANCODE_Q, INPUTEVENT_KEY_Q },
	{ SDL_SCANCODE_R, INPUTEVENT_KEY_R },
	{ SDL_SCANCODE_S, INPUTEVENT_KEY_S },
	{ SDL_SCANCODE_T, INPUTEVENT_KEY_T },
	{ SDL_SCANCODE_U, INPUTEVENT_KEY_U },
	{ SDL_SCANCODE_W, INPUTEVENT_KEY_W },
	{ SDL_SCANCODE_V, INPUTEVENT_KEY_V },
	{ SDL_SCANCODE_X, INPUTEVENT_KEY_X },
	{ SDL_SCANCODE_Y, INPUTEVENT_KEY_Y },
	{ SDL_SCANCODE_Z, INPUTEVENT_KEY_Z },

	{ SDL_SCANCODE_CAPSLOCK, INPUTEVENT_KEY_CAPS_LOCK, ID_FLAG_TOGGLE },

	{ SDL_SCANCODE_KP_1, INPUTEVENT_KEY_NP_1 },
	{ SDL_SCANCODE_KP_2, INPUTEVENT_KEY_NP_2 },
	{ SDL_SCANCODE_KP_3, INPUTEVENT_KEY_NP_3 },
	{ SDL_SCANCODE_KP_4, INPUTEVENT_KEY_NP_4 },
	{ SDL_SCANCODE_KP_5, INPUTEVENT_KEY_NP_5 },
	{ SDL_SCANCODE_KP_6, INPUTEVENT_KEY_NP_6 },
	{ SDL_SCANCODE_KP_7, INPUTEVENT_KEY_NP_7 },
	{ SDL_SCANCODE_KP_8, INPUTEVENT_KEY_NP_8 },
	{ SDL_SCANCODE_KP_9, INPUTEVENT_KEY_NP_9 },
	{ SDL_SCANCODE_KP_0, INPUTEVENT_KEY_NP_0 },
	{ SDL_SCANCODE_KP_PERIOD, INPUTEVENT_KEY_NP_PERIOD },
	{ SDL_SCANCODE_KP_PLUS, INPUTEVENT_KEY_NP_ADD },
	{ SDL_SCANCODE_KP_MINUS, INPUTEVENT_KEY_NP_SUB },
	{ SDL_SCANCODE_KP_MULTIPLY, INPUTEVENT_KEY_NP_MUL },
	{ SDL_SCANCODE_KP_DIVIDE, INPUTEVENT_KEY_NP_DIV },
	{ SDL_SCANCODE_KP_ENTER, INPUTEVENT_KEY_ENTER },

	{ SDL_SCANCODE_MINUS, INPUTEVENT_KEY_SUB },
	{ SDL_SCANCODE_EQUALS, INPUTEVENT_KEY_EQUALS },
	{ SDL_SCANCODE_BACKSPACE, INPUTEVENT_KEY_BACKSPACE },
	{ SDL_SCANCODE_RETURN, INPUTEVENT_KEY_RETURN },
	{ SDL_SCANCODE_SPACE, INPUTEVENT_KEY_SPACE },

	{ SDL_SCANCODE_LSHIFT, INPUTEVENT_KEY_SHIFT_LEFT },
	{ SDL_SCANCODE_LCTRL, INPUTEVENT_KEY_CTRL },
	{ SDL_SCANCODE_LGUI, INPUTEVENT_KEY_AMIGA_LEFT },
	{ SDL_SCANCODE_LALT, INPUTEVENT_KEY_ALT_LEFT },
	{ SDL_SCANCODE_RALT, INPUTEVENT_KEY_ALT_RIGHT },
	{ SDL_SCANCODE_RGUI, INPUTEVENT_KEY_AMIGA_RIGHT },
	{ SDL_SCANCODE_APPLICATION, INPUTEVENT_KEY_APPS },
	{ SDL_SCANCODE_RCTRL, INPUTEVENT_KEY_CTRL },
	{ SDL_SCANCODE_RSHIFT, INPUTEVENT_KEY_SHIFT_RIGHT },

	{ SDL_SCANCODE_UP, INPUTEVENT_KEY_CURSOR_UP },
	{ SDL_SCANCODE_DOWN, INPUTEVENT_KEY_CURSOR_DOWN },
	{ SDL_SCANCODE_LEFT, INPUTEVENT_KEY_CURSOR_LEFT },
	{ SDL_SCANCODE_RIGHT, INPUTEVENT_KEY_CURSOR_RIGHT },

	{ SDL_SCANCODE_LEFTBRACKET, INPUTEVENT_KEY_LEFTBRACKET },
	{ SDL_SCANCODE_RIGHTBRACKET, INPUTEVENT_KEY_RIGHTBRACKET },
	{ SDL_SCANCODE_SEMICOLON, INPUTEVENT_KEY_SEMICOLON },
	{ SDL_SCANCODE_APOSTROPHE, INPUTEVENT_KEY_SINGLEQUOTE },
	{ SDL_SCANCODE_GRAVE, INPUTEVENT_KEY_BACKQUOTE },
	{ SDL_SCANCODE_BACKSLASH, INPUTEVENT_KEY_2B },
	{ SDL_SCANCODE_COMMA, INPUTEVENT_KEY_COMMA },
	{ SDL_SCANCODE_PERIOD, INPUTEVENT_KEY_PERIOD },
	{ SDL_SCANCODE_SLASH, INPUTEVENT_KEY_DIV },
	{ SDL_SCANCODE_NONUSBACKSLASH, INPUTEVENT_KEY_30 },

	{ SDL_SCANCODE_INSERT, INPUTEVENT_KEY_INSERT },
	{ SDL_SCANCODE_DELETE, INPUTEVENT_KEY_DEL },
	{ SDL_SCANCODE_HOME, INPUTEVENT_KEY_HOME },
	{ SDL_SCANCODE_END, INPUTEVENT_KEY_END },
	{ SDL_SCANCODE_PAGEUP, INPUTEVENT_KEY_PAGEUP },
	{ SDL_SCANCODE_PAGEDOWN, INPUTEVENT_KEY_PAGEDOWN },
	{ SDL_SCANCODE_SCROLLLOCK, INPUTEVENT_KEY_HELP },
	{ SDL_SCANCODE_SYSREQ, INPUTEVENT_KEY_SYSRQ },

	{ SDL_SCANCODE_AUDIOSTOP, INPUTEVENT_KEY_CDTV_STOP },
	{ SDL_SCANCODE_AUDIOPLAY, INPUTEVENT_KEY_CDTV_PLAYPAUSE },
	{ SDL_SCANCODE_AUDIOPREV, INPUTEVENT_KEY_CDTV_PREV },
	{ SDL_SCANCODE_AUDIONEXT, INPUTEVENT_KEY_CDTV_NEXT },

	{ -1, 0 }
};

static struct uae_input_device_kbr_default *keytrans[] =
{
	keytrans_amiga,
	keytrans_pc1,
	keytrans_pc1
};


static int kb_np[] = { SDLK_KP_4, -1, SDLK_KP_6, -1, SDLK_KP_8, -1, SDLK_KP_2, -1, SDLK_KP_0, SDLK_KP_5, -1, SDLK_KP_DECIMAL, -1, SDLK_KP_ENTER, -1, -1 };
static int kb_ck[] = { SDLK_LEFT, -1, SDLK_RIGHT, -1, SDLK_UP, -1, SDLK_DOWN, -1, SDLK_RCTRL, SDLK_RALT, -1, SDLK_RSHIFT, -1, -1 };
static int kb_se[] = { SDLK_a, -1, SDLK_d, -1, SDLK_w, -1, SDLK_s, -1, SDLK_LALT, -1, SDLK_LSHIFT, -1, -1 };
static int kb_np3[] = { SDLK_KP_4, -1, SDLK_KP_6, -1, SDLK_KP_8, -1, SDLK_KP_2, -1, SDLK_KP_0, SDLK_KP_5, -1, SDLK_KP_DECIMAL, -1, SDLK_KP_ENTER, -1, -1 };
static int kb_ck3[] = { SDLK_LEFT, -1, SDLK_RIGHT, -1, SDLK_UP, -1, SDLK_DOWN, -1, SDLK_RCTRL, -1, SDLK_RSHIFT, -1, SDLK_RALT, -1, -1 };
static int kb_se3[] = { SDLK_a, -1, SDLK_d, -1, SDLK_w, -1, SDLK_s, -1, SDLK_LALT, -1, SDLK_LSHIFT, -1, SDLK_LCTRL, -1, -1 };
static int kb_cd32_np[] = { SDLK_KP_4, -1, SDLK_KP_6, -1, SDLK_KP_8, -1, SDLK_KP_2, -1, SDLK_KP_0, SDLK_KP_5, SDLK_KP_1, -1, SDLK_KP_DECIMAL, SDLK_KP_3, -1, SDLK_KP_7, -1, SDLK_KP_9, -1, SDLK_KP_DIVIDE, -1, SDLK_KP_MINUS, -1, SDLK_KP_MULTIPLY, -1, -1 };
static int kb_cd32_ck[] = { SDLK_LEFT, -1, SDLK_RIGHT, -1, SDLK_UP, -1, SDLK_DOWN, -1, SDLK_RCTRL, -1, SDLK_RALT, -1, SDLK_KP_7, -1, SDLK_KP_9, -1, SDLK_KP_DIVIDE, -1, SDLK_KP_MINUS, -1, SDLK_KP_MULTIPLY, -1, -1 };
static int kb_cd32_se[] = { SDLK_a, -1, SDLK_d, -1, SDLK_w, -1, SDLK_s, -1, -1, SDLK_LALT, -1, SDLK_LSHIFT, -1, SDLK_KP_7, -1, SDLK_KP_9, -1, SDLK_KP_DIVIDE, -1, SDLK_KP_MINUS, -1, SDLK_KP_MULTIPLY, -1, -1 };

static int kb_cdtv[] = { SDLK_KP_1, -1, SDLK_KP_3, -1, SDLK_KP_7, -1, SDLK_KP_9, -1, -1 };

static int kb_xa1[] = { SDLK_KP_4, -1, SDLK_KP_6, -1, SDLK_KP_8, -1, SDLK_KP_2, SDLK_KP_5, -1, SDLK_LCTRL, -1, SDLK_LALT, -1, SDLK_SPACE, -1, -1 };
static int kb_xa2[] = { SDLK_d, -1, SDLK_g, -1, SDLK_r, -1, SDLK_f, -1, SDLK_a, -1, SDLK_s, -1, SDLK_q, -1 };
static int kb_arcadia[] = { SDLK_F2, -1, SDLK_1, -1, SDLK_2, -1, SDLK_5, -1, SDLK_6, -1, -1 };
static int kb_arcadiaxa[] = { SDLK_1, -1, SDLK_2, -1, SDLK_3, -1, SDLK_4, -1, SDLK_6, -1, SDLK_LEFTBRACKET, SDLK_LSHIFT, -1, SDLK_RIGHTBRACKET, -1, SDLK_c, -1, SDLK_5, -1, SDLK_z, -1, SDLK_x, -1, -1 };

static int *kbmaps[] = {
	kb_np, kb_ck, kb_se, kb_np3, kb_ck3, kb_se3,
	kb_cd32_np, kb_cd32_ck, kb_cd32_se,
	kb_xa1, kb_xa2, kb_arcadia, kb_arcadiaxa, kb_cdtv
};

static bool specialpressed()
{
	return (input_getqualifiers() & ID_FLAG_QUALIFIER_SPECIAL) != 0;
}
static bool shiftpressed()
{
	return (input_getqualifiers() & ID_FLAG_QUALIFIER_SHIFT) != 0;
}
static bool altpressed()
{
	return (input_getqualifiers() & ID_FLAG_QUALIFIER_ALT) != 0;
}
static bool ctrlpressed()
{
	return (input_getqualifiers() & ID_FLAG_QUALIFIER_CONTROL) != 0;
}

static int capslockstate;
static int host_capslockstate, host_numlockstate, host_scrolllockstate;

int getcapslockstate()
{
	return capslockstate;
}
void setcapslockstate(int state)
{
	capslockstate = state;
}

void clearallkeys()
{
	inputdevice_updateconfig(&changed_prefs, &currprefs);
}

static const int np[] = {
	SDLK_KP_0, 0, SDLK_KP_PERIOD, 0, SDLK_KP_1, 1, SDLK_KP_2, 2,
	SDLK_KP_3, 3, SDLK_KP_4, 4, SDLK_KP_5, 5, SDLK_KP_6, 6, SDLK_KP_7, 7,
	SDLK_KP_8, 8, SDLK_KP_9, 9, -1 };

void keyboard_settrans(void)
{
	inputdevice_setkeytranslation(keytrans, kbmaps);
}

int target_checkcapslock(const int scancode, int *state)
{
	if (scancode != SDLK_CAPSLOCK && scancode != SDLK_NUMLOCKCLEAR && scancode != SDLK_SCROLLLOCK)
		return 0;
	if (*state == 0)
		return -1;
	if (scancode == SDLK_CAPSLOCK)
		*state = host_capslockstate;
	if (scancode == SDLK_NUMLOCKCLEAR)
		*state = host_numlockstate;
	if (scancode == SDLK_SCROLLLOCK)
		*state = host_scrolllockstate;
	return 1;
}
